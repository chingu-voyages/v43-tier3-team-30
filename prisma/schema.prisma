// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  sharedEventIds String[]  @db.ObjectId

  accounts        Account[]
  sessions        Session[]
  initiatedEvents Event[]   @relation(name: "initiatedEvents")
  sharedEvents    Event[]   @relation(name: "sharedEvents", fields: [sharedEventIds], references: [id])
  notes           Note[]
}

model Event {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  brochure_img  String?
  isPublic      Boolean?
  favorite      Boolean?
  tag           String?
  date          DateTime?
  likedIds      String[] @db.ObjectId

  sharedUserIds String[] @db.ObjectId
  sharedUsers   User[]   @relation(name: "sharedEvents", fields: [sharedUserIds], references: [id])

  userId        String @db.ObjectId
  user          User   @relation(name: "initiatedEvents", fields: [userId], references: [id], onDelete: Cascade)

  notes         Note[]
}

model Note {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  content       String

  eventId       String @db.ObjectId
  event         Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId        String @db.ObjectId
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
